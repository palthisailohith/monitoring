########################################
# PROMETHEUS CONFIGMAP
########################################
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
    scrape_configs:
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']
      - job_name: 'minio'
        static_configs:
          - targets: ['minio-service.<your-namespace>.svc.cluster.local:9000']
      - job_name: 'trino'
        static_configs:
          - targets: ['trino-service.<your-namespace>.svc.cluster.local:8080']
      - job_name: 'hivemetastore'
        static_configs:
          - targets: ['hivemetastore-service.<your-namespace>.svc.cluster.local:9083']

---
########################################
# PROMETHEUS PVC
########################################
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: <your-storage-class>

---
########################################
# PROMETHEUS DEPLOYMENT
########################################
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  labels:
    app: prometheus
spec:
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
        - name: prometheus
          image: prom/prometheus:v2.54.0
          ports:
            - containerPort: 9090
              name: web
          command:
            - bash
            - -c
            - |
              uid=$(id -u)
              if ! whoami &>/dev/null; then
                echo "prometheus:x:${uid}:0:prometheus:/prometheus:/bin/bash" >> /etc/passwd
              fi
              mkdir -p /prometheus && chmod -R g+rwX /prometheus
              exec prometheus \
                --config.file=/etc/prometheus/prometheus.yml \
                --storage.tsdb.path=/prometheus \
                --web.enable-lifecycle
          volumeMounts:
            - name: config
              mountPath: /etc/prometheus
            - name: data
              mountPath: /prometheus
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
            limits:
              cpu: 500m
              memory: 512Mi
      volumes:
        - name: config
          configMap:
            name: prometheus-config
        - name: data
          persistentVolumeClaim:
            claimName: prometheus-data

---
########################################
# PROMETHEUS SERVICE
########################################
apiVersion: v1
kind: Service
metadata:
  name: prometheus
spec:
  selector:
    app: prometheus
  ports:
    - name: web
      port: 9090
      targetPort: 9090

---
########################################
# PROMETHEUS ROUTE
########################################
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: prometheus
spec:
  to:
    kind: Service
    name: prometheus
  port:
    targetPort: web
  tls:
    termination: edge

---
########################################
# GRAFANA PVC
########################################
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: <your-storage-class>

---
########################################
# GRAFANA SECRET
########################################
apiVersion: v1
kind: Secret
metadata:
  name: grafana-secret
type: Opaque
stringData:
  admin-user: admin
  admin-password: admin

---
########################################
# GRAFANA DEPLOYMENT
########################################
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  labels:
    app: grafana
spec:
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: grafana/grafana:10.4.1
          ports:
            - containerPort: 3000
              name: web
          env:
            - name: GF_SECURITY_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: grafana-secret
                  key: admin-user
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: grafana-secret
                  key: admin-password
            - name: GF_AUTH_ANONYMOUS_ENABLED
              value: "true"
            - name: GF_AUTH_ANONYMOUS_ORG_ROLE
              value: "Viewer"
          command:
            - bash
            - -c
            - |
              uid=$(id -u)
              if ! whoami &>/dev/null; then
                echo "grafana:x:${uid}:0:grafana:/var/lib/grafana:/bin/bash" >> /etc/passwd
              fi
              mkdir -p /var/lib/grafana && chmod -R g+rwX /var/lib/grafana
              exec grafana-server --homepath=/usr/share/grafana --config=/etc/grafana/grafana.ini
          volumeMounts:
            - name: grafana-storage
              mountPath: /var/lib/grafana
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
            limits:
              cpu: 500m
              memory: 512Mi
      volumes:
        - name: grafana-storage
          persistentVolumeClaim:
            claimName: grafana-data

---
########################################
# GRAFANA SERVICE
########################################
apiVersion: v1
kind: Service
metadata:
  name: grafana
spec:
  selector:
    app: grafana
  ports:
    - name: web
      port: 3000
      targetPort: 3000

---
########################################
# GRAFANA ROUTE
########################################
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: grafana
spec:
  to:
    kind: Service
    name: grafana
  port:
    targetPort: web
  tls:
    termination: edge
